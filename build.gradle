buildscript {
    // Make sure to use the same AGP as the main project.
    def androidGradlePlugin = '3.6.1'
    /**
     * Calculates the right lint version for the provided [androidGradlePlugin] version. AGP is
     * tightly coupled with lint because it implements LintClient. The formula to calculate the
     * lint version relative to AGP is: AGP version + 23.
     *
     * E.g. AGP version 3.2.1 -> Lint version 26.2.1
     */
    def lintVersion = { agp ->
        def (majorVersion, minorVersion, patchVersion) = agp.split("\\.")
        int lintMajorVersion = (majorVersion as Integer) + 23
        return "$lintMajorVersion.$minorVersion.$patchVersion"
    }
    ext.versions = [
        androidGradlePlugin     : androidGradlePlugin,
        androidLint             : lintVersion(androidGradlePlugin),
        compileSdk              : 29,
        minSdk                  : 14,
        targetSdk               : 29,
        kotlin                  : '1.3.70',
        kotlinCoroutines        : '1.3.4',
        kotlinMetadataJvm       : '0.1.0',
        androidxAppcompat       : '1.1.0',
        androidxConstraintlayout: '1.1.3',
        androidxFragment        : '1.2.2',
        androidxLifecycle       : '2.2.0',
        androidxRoom            : '2.2.4',
        androidxTestCore        : '1.2.0',
        androidxTestRunner      : '1.2.0',
        androidxTestJunit       : '1.1.1',
        androidxTestEspresso    : '3.2.0',
        autoService             : '1.0-rc6',
        okhttp                  : '3.12.10',
        dagger                  : '2.26',
        kotlinPoet              : '1.5.0',
        thrift                  : '0.12.0',
        mockito                 : '2.28.2',
        mockitoKotlin           : '2.2.0',
        mockk                   : '1.9.3',
        robolectric             : '4.3.1',
    ]
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

allprojects {
    group = 'com.linecorp.lich'
    repositories {
        google()
        jcenter()
    }
    afterEvaluate {
        if (ext.has('publicationType')) {
            afterEvaluate {
                configurePublication(project, ext.publicationType)
            }
        }
    }
}

def configurePublication(project, type) {
    configure(project) {
        switch (type) {
            case 'jar':
                task sourcesJar(type: Jar) {
                    archiveClassifier = 'sources'
                    from sourceSets.main.allSource
                }
                publishing {
                    publications {
                        myPublication(MavenPublication) {
                            from components.java
                            artifact sourcesJar
                        }
                    }
                }
                break
            case 'aar':
                task sourcesJar(type: Jar) {
                    archiveClassifier = 'sources'
                    from android.sourceSets.main.java.srcDirs
                }
                publishing {
                    publications {
                        myPublication(MavenPublication) {
                            from components.release
                            artifact sourcesJar
                        }
                    }
                }
                break
            default:
                throw new InvalidUserDataException("Unknown publicationType: $type")
        }
        publishing {
            repositories {
                maven {
                    url = findProperty('publishingRepositoryUrl') ?: "$rootDir/repo"
                }
            }
        }
        bintray {
            user = findProperty('bintrayUser') ?: ''
            key = findProperty('bintrayApiKey') ?: ''
            publications = ['myPublication']
            publish = true
            pkg {
                userOrg = 'line'
                repo = 'lich'
                name = project.name
                websiteUrl = 'https://github.com/line/lich'
                issueTrackerUrl = 'https://github.com/line/lich/issues'
                vcsUrl = 'https://github.com/line/lich.git'
                licenses = ['Apache-2.0']
                publicDownloadNumbers = true
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task cleanRepo(type: Delete) {
    delete "$rootDir/repo"
}
